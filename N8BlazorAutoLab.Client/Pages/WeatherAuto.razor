@page "/weather-auto"
@rendermode InteractiveAuto
@inject NavigationManager navSvc

<PageTitle>Weather Auto</PageTitle>

<h1>Weather Auto | CSR</h1>
<p>This component demonstrates showing data.</p>

<button @onclick=HandleQuery class="btn btn-primary">刷新</button>

<div class="alert alert-warning my-3" role="alert">
  InteractiveAuto 可以視做 WebAssembly。<br/>
  只能用 WebAPI 與伺服器端通訊。
</div>

@if(errorMessage != null)
{
  <div class="alert alert-danger" role="alert">
    @errorMessage
  </div>
}

@if (f_loading)
{
  <p><em>Loading...</em></p>
}
else if(forecasts != null)
{
  <table class="table">
    <thead>
      <tr>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var forecast in forecasts)
      {
        <tr>
          <td>@forecast.Date.ToShortDateString()</td>
          <td>@forecast.TemperatureC</td>
          <td>@forecast.TemperatureF</td>
          <td>@forecast.Summary</td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  WeatherForecast[]? forecasts;
  bool f_loading = false;
  string? errorMessage = null;

  protected override async Task OnInitializedAsync()
  {
    await HandleQuery();
  }

  async Task HandleQuery()
  {
    try
    {
      errorMessage = null;
      f_loading = true;

      using HttpClient client = new HttpClient();
      client.BaseAddress = new Uri(navSvc.BaseUri);

      using HttpResponseMessage resp = await client.GetAsync("api/WeatherData");
      if (!resp.IsSuccessStatusCode)
        return;

      forecasts = await resp.Content.ReadFromJsonAsync<WeatherForecast[]>();
    }
    catch(Exception ex)
    {
      errorMessage = "出現例外! " + ex.Message;
    }
    finally
    {
      f_loading = false;
    }
  }

}
